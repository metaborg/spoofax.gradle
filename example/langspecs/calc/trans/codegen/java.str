module codegen/java

imports 
  signatures/-
  nabl2/api

rules // programs

  program-to-java(|filename) : 
    Program(stats) -> $<import java.math.BigDecimal;
                        import java.math.RoundingMode;
                        import java.util.function.Function;
                        
                        public class <filename> {
                          public static void main(String[] args) {
                              System.out.println(eval());
                          }
                          public static <jty> eval() {
                            <jstats>
                            return <je>;
                          }
                        }
                       >
    with
      <last> stats => last
    ; <return-type; type-to-java> last => jty
    ; <stats-to-java> stats => jstats
    ; <return-exp; exp-to-java> last => je
  
  return-type : 
    Bind(_, e) -> ty
    with
      <nabl2-get-ast-type> e => ty
  
  return-type : 
    Exp(e) -> ty
    with
      <nabl2-get-ast-type> e => ty
    
  return-exp : Bind(x, _) -> Var(x)
  return-exp : Exp(e) -> e
    
rules // statements

  stats-to-java :
    [Bind(x, e) | stats] -> $[final [jty] [x] = [je];
                              [jstats]]
    with
      <nabl2-get-ast-type> e => ty
    ; <type-to-java> ty => jty
    ; <exp-to-java> e => je
    ; <stats-to-java> stats => jstats

  stats-to-java :
    [Exp(_) | stats] -> jstats
    with
      <stats-to-java> stats => jstats
                     
  stats-to-java : []  -> $[]
                    
rules // numbers

  exp-to-java : Num(v) -> $[new BigDecimal("[v]")]

  exp-to-java :
    Add(e1, e2) -> $[[je1].add([je2])]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2
    
  exp-to-java :
    Sub(e1, e2) -> $[[je1].subtract([je2])]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

  exp-to-java :
    Mul(e1, e2) -> $[[je1].multiply([je2])]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

  exp-to-java :
    Div(e1, e2) -> $[[je1].divide([je2], 50, RoundingMode.HALF_UP)]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

  exp-to-java :
    Pow(e1, e2) -> $[[je1].pow([je2].intValueExact())]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

  exp-to-java :
    Eq(e1, e2) -> $[([je1].compareTo([je2]) == 0)]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

  exp-to-java :
    Lt(e1, e2) -> $[([je1].compareTo([je2]) < 0)]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

rules // booleans

  exp-to-java : True() -> $[true]
  exp-to-java : False() -> $[false]

  exp-to-java : 
    If(e1, e2, e3) -> $[([je1] ? [je2] : [je3])]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2
    ; <exp-to-java> e3 => je3
      
rules // variables and functions
   
  exp-to-java : Var(x) -> $[[x]]
  
  exp-to-java : 
    Let(x, e1, e2) -> $[(([jty]) [x] -> [je2]).apply([je1])]
    with
      <nabl2-get-ast-type> e1 => ty1
    ; <nabl2-get-ast-type> e2 => ty2
    ; <type-to-java> FunT(ty1, ty2) => jty
    ; <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2
  
  exp-to-java :
    f@Fun([x], e) -> $[(([jty]) [x] -> [je])]
    with
      <nabl2-get-ast-type> f => ty
    ; <type-to-java> ty => jty
    ; <exp-to-java> e => je
    
  exp-to-java:
    App(e1, e2) -> $[[e1].apply([e2])]
    with
      <exp-to-java> e1 => je1
    ; <exp-to-java> e2 => je2

rules // types

  type-to-java : NumT() -> $[BigDecimal]
  type-to-java : BoolT() -> $[Boolean]
  
  type-to-java : 
    FunT(ty1, ty2) -> $[Function<[jty1], [jty2]>]
    with 
      <type-to-java> ty1 => jty1 
    ; <type-to-java> ty2 => jty2